"""
Make a heatmap from a list of user specified ingredients
and generate a list of suggested ingredients to round out
the menu.

Usage:
    viz_heatmap.py -i <input_file> -o <output_file> -d <depth> -n <ingredients>...

Options:
    -i <input_file>     The input file, which is the similarity matrix
                        generated by compute_similarities.py
                        default: jaccard_similarities.json
    -o <output_file>    The output file, which is the list of suggested
                        ingredients
                        default: suggested_ingredients.txt
    -d <depth>          The depth of the search.  This is the number of
                        ingredients to suggest.
                        default: 5
    -n [ingredients]    The list of ingredients to use as the starting
                        point for the search.  This is a list of strings
                        that are the canonical titles of the ingredients.
                        default: 'garlic' 'basil' 'olive oil'

    -h --help           Show this screen.

Example:
    viz_heatmap.py -i jaccard_similarities.json -o suggested_ingredients.json \
        -d 5 -n 'garlic' -n 'basil' -n 'olive oil'
"""

import sys
import pandas as pd
import numpy as np
import os.path
import sys

from docopt import docopt


def main():

    # get the arguments
    args = docopt(__doc__)

    # get the input file
    input_file = args['-i']
    if not os.path.isfile(input_file):
        print('The input file does not exist')
        sys.exit(1)

    # get the output file
    if args['-o'] is None:
        output_file = 'suggested_ingredients.txt'
    else: output_file = args['-o']

    # get the depth
    if args['-d'] is None:
        depth = 5
    else: depth = int(args['-d'])

    # get the ingredients
    if args['-n'] is None:
        ingredients = ['garlic', 'basil', 'olive oil']
    else: ingredients = args['-n']

    # read the input file
    sim_matrix = pd.read_json(input_file)
    print(sim_matrix)

    # now we sort the similarity matrix by the ingredients
    # and then get the top depth=n ingredients
    suggested_ingredients = []
    for i in range(depth):
        # get the top n ingredients
        top_n = sim_matrix[ingredients].mean(axis=1).sort_values(ascending=False)
        top_n = top_n.drop(ingredients)
        suggested_ingredients.append(top_n.index.values[0])
        ingredients.append(top_n.index.values[0])

    print(suggested_ingredients)
    print(ingredients)
    # append the input ingredients to the suggested ingredients

    # print the suggested ingredients as a slice of the
    # similarity matrix, in both columns and rows
    suggested_sim_matrix = sim_matrix[ingredients]
    suggested_sim_matrix = suggested_sim_matrix.loc[ingredients]
    # sort the suggested ingredients as an adjacency matrix:
    suggested_sim_matrix = suggested_sim_matrix.sort_index(axis=0)
    suggested_sim_matrix = suggested_sim_matrix.sort_index(axis=1)
    print(suggested_sim_matrix)

    """plotting"""
    import seaborn as sns
    import matplotlib.pyplot as plt
    sns.set()
    sns.set_style("ticks")
    sns.set_palette("viridis")
    plt.figure(figsize=(10,10))
    #use a log scale
    sns.heatmap(suggested_sim_matrix, cmap='viridis', annot=True, fmt='.3f', cbar=False, square=True, mask=np.eye(len(suggested_sim_matrix), dtype=bool))
    plt.savefig('heatmap.png', dpi=300)

    # print this to the output file in csv format,
    # and make sure entries are rounded to 3 decimal places
    suggested_sim_matrix.to_csv(output_file, float_format='%.3f')

if __name__ == '__main__':
    main()